package main

import (
	"bytes"
	"crypto/sha256"
	"encoding/hex"
	"errors"
	"io"
	"os"
	"time"
)

func checkSumm(conf Config) error {
	expectedHash := conf.Hash
	exePath, err := os.Executable()
	if err != nil {
		return errors.New("не удалось получить путь к исполняемому файлу")
	}
	f, err := os.Open(exePath)
	if err != nil {
		return errors.New("не удалось открыть файл")
	}
	defer f.Close()

	h := sha256.New()

	if _, err := io.Copy(h, f); err != nil {
		return errors.New("ошибка чтения файла")
	}
	actualHash := h.Sum(nil)

	if !(hex.EncodeToString(actualHash) == expectedHash) {
		return errors.New("контроль целостности не пройден")
	}

	return nil
}

func testDate(conf Config) error {
	if conf.TimeLimit.Before(time.Now()) {
		return errors.New("время работы СКЗИ (ключа СКЗИ) истекло, обратитесь к администратору")
	}
	return nil
}
func testAlgo() error {
	err := testStribog()
	if err != nil {
		return err
	}
	err = testHmac()
	if err != nil {
		return err
	}
	err = testKdfTree()
	if err != nil {
		return err
	}
	return nil
}

func testKdfTree() error {
	var K []uint8 = []uint8{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	}
	size := 512 //key_param
	res := make([]uint8, size/8)
	kdfTree(res, K, 32, 1, size)
	var test []uint8 = []uint8{
		0x22, 0xb6, 0x83, 0x78, 0x45, 0xc6, 0xbe, 0xf6, 0x5e, 0xa7, 0x16, 0x72, 0xb2, 0x65, 0x83, 0x10,
		0x86, 0xd3, 0xc7, 0x6a, 0xeb, 0xe6, 0xda, 0xe9, 0x1c, 0xad, 0x51, 0xd8, 0x3f, 0x79, 0xd1, 0x6b,
		0x07, 0x4c, 0x93, 0x30, 0x59, 0x9d, 0x7f, 0x8d, 0x71, 0x2f, 0xca, 0x54, 0x39, 0x2f, 0x4d, 0xdd,
		0xe9, 0x37, 0x51, 0x20, 0x6b, 0x35, 0x84, 0xc8, 0xf4, 0x3f, 0x9e, 0x6d, 0xc5, 0x15, 0x31, 0xf9,
	}
	if !bytes.Equal(res[:], test[:]) {
		return errors.New("ошибка при проверке kdfTree")
	}

	return nil
}
func testHmac() error {
	var K []uint8 = []uint8{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
		0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	}
	var T []uint8 = []uint8{
		0x01, 0x26, 0xbd, 0xb8, 0x78, 0x00, 0xaf, 0x21,
		0x43, 0x41, 0x45, 0x65, 0x63, 0x78, 0x01, 0x00,
	}
	ret := make([]uint8, 32)
	var t []uint8 = []uint8{
		0xa1, 0xaa, 0x5f, 0x7d, 0xe4, 0x02, 0xd7, 0xb3,
		0xd3, 0x23, 0xf2, 0x99, 0x1c, 0x8d, 0x45, 0x34,
		0x01, 0x31, 0x37, 0x01, 0x0a, 0x83, 0x75, 0x4f,
		0xd0, 0xaf, 0x6d, 0x7c, 0xd4, 0x92, 0x2e, 0xd9,
	}
	Hmac256(ret, K, T, 32, 16)
	if !bytes.Equal(ret[:], t[:]) {
		return errors.New("ошибка при проверке hmac")
	}
	return nil
}
func testStribog() error {
	var m63 []uint8 = []uint8{
		0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36,
		0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38,
		0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
		0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32,
		0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34,
		0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36,
		0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38,
		0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
	}
	var m72 []uint8 = []uint8{
		0xfb, 0xe2, 0xe5, 0xf0, 0xee, 0xe3, 0xc8, 0x20,
		0xfb, 0xea, 0xfa, 0xeb, 0xef, 0x20, 0xff, 0xfb,
		0xf0, 0xe1, 0xe0, 0xf0, 0xf5, 0x20, 0xe0, 0xed,
		0x20, 0xe8, 0xec, 0xe0, 0xeb, 0xe5, 0xf0, 0xf2,
		0xf1, 0x20, 0xff, 0xf0, 0xee, 0xec, 0x20, 0xf1,
		0x20, 0xfa, 0xf2, 0xfe, 0xe5, 0xe2, 0x20, 0x2c,
		0xe8, 0xf6, 0xf3, 0xed, 0xe2, 0x20, 0xe8, 0xe6,
		0xee, 0xe1, 0xe8, 0xf0, 0xf2, 0xd1, 0x20, 0x2c,
		0xe8, 0xf0, 0xf2, 0xe5, 0xe2, 0x20, 0xe5, 0xd1,
	}

	var test1 []uint8 = []uint8{
		0x00, 0x55, 0x7b, 0xe5, 0xe5, 0x84, 0xfd, 0x52,
		0xa4, 0x49, 0xb1, 0x6b, 0x02, 0x51, 0xd0, 0x5d,
		0x27, 0xf9, 0x4a, 0xb7, 0x6c, 0xba, 0xa6, 0xda,
		0x89, 0x0b, 0x59, 0xd8, 0xef, 0x1e, 0x15, 0x9d,
	}
	var test2 []uint8 = []uint8{
		0x50, 0x8f, 0x7e, 0x55, 0x3c, 0x06, 0x50, 0x1d,
		0x74, 0x9a, 0x66, 0xfc, 0x28, 0xc6, 0xca, 0xc0,
		0xb0, 0x05, 0x74, 0x6d, 0x97, 0x53, 0x7f, 0xa8,
		0x5d, 0x9e, 0x40, 0x90, 0x4e, 0xfe, 0xd2, 0x9d,
	}
	h := make([]uint8, 32)

	get256(m63, h)
	if !bytes.Equal(h[:], test1[:]) {
		return errors.New("ошибка при проверке stribog")
	}

	get256(m72, h)
	if !bytes.Equal(h[:], test2[:]) {
		return errors.New("ошибка при проверке stribog")
	}
	return nil
}
